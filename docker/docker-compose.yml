# Production Docker Compose Configuration
# This file is for production deployment with full containerization

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: teachingcenter-postgres-prod
    environment:
      POSTGRES_DB: teachingcenter
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d teachingcenter"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - teachingcenter-network

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: teachingcenter-app-prod
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password123}@postgres:5432/teachingcenter
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-for-production}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - teachingcenter-network

  # Database Admin Interface (optional for production)
  adminer:
    image: adminer
    container_name: teachingcenter-adminer-prod
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - teachingcenter-network

volumes:
  postgres_data:

networks:
  teachingcenter-network:
    driver: bridge
