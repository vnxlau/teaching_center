generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  name               String
  password           String
  role               UserRole  @default(STUDENT)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  address            String?
  emailNotifications Boolean   @default(true)
  language           String    @default("en")
  phone              String?
  smsNotifications   Boolean   @default(true)
  vatNumber          String?
  receivedMessages   Message[] @relation("ReceivedMessages")
  sentMessages       Message[] @relation("SentMessages")
  parent             Parent?
  staff              Staff?
  student            Student?

  @@map("users")
}

model SchoolYear {
  id          String       @id @default(cuid())
  name        String       @unique
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  activities  Activity[]
  attendances Attendance[]
  payments    Payment[]
  students    Student[]
  tests       Test[]

  @@map("school_years")
}

model Student {
  id               String            @id @default(cuid())
  userId           String            @unique
  studentCode      String            @unique
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  grade            String?
  phone            String?
  address          String?
  emergencyContact String?
  enrollmentDate   DateTime          @default(now())
  isActive         Boolean           @default(true)
  notes            String?
  schoolYearId     String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  discountRate     Decimal           @default(0) @db.Decimal(5, 2)
  membershipPlanId String?
  monthlyDueAmount Decimal?          @db.Decimal(10, 2)
  attendances      Attendance[]
  payments         Payment[]
  activities       StudentActivity[]
  parents          StudentParent[]
  membershipPlan   MembershipPlan?   @relation(fields: [membershipPlanId], references: [id])
  schoolYear       SchoolYear        @relation(fields: [schoolYearId], references: [id])
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  teachingPlan     TeachingPlan?
  tests            TestResult[]
  schedules        StudentSchedule[]

  @@map("students")
}

model Parent {
  id        String          @id @default(cuid())
  userId    String          @unique
  firstName String
  lastName  String
  phone     String?
  email     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  students  StudentParent[]

  @@map("parents")
}

model StudentParent {
  id           String  @id @default(cuid())
  studentId    String
  parentId     String
  relationship String
  parent       Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student      Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@map("student_parents")
}

model Staff {
  id         String     @id @default(cuid())
  userId     String     @unique
  firstName  String
  lastName   String
  position   String
  phone      String?
  hireDate   DateTime   @default(now())
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  activities Activity[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tests      Test[]

  @@map("staff")
}

model Payment {
  id           String        @id @default(cuid())
  studentId    String
  schoolYearId String
  amount       Decimal       @db.Decimal(10, 2)
  dueDate      DateTime
  paidDate     DateTime?
  status       PaymentStatus @default(PENDING)
  paymentType  PaymentType   @default(MONTHLY_FEE)
  method       String?
  reference    String?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  schoolYear   SchoolYear    @relation(fields: [schoolYearId], references: [id])
  student      Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Subject {
  id            String                @id @default(cuid())
  name          String                @unique
  description   String?
  code          String?               @unique
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  teachingPlans TeachingPlanSubject[]
  tests         Test[]

  @@map("subjects")
}

model TeachingPlanSubject {
  id             String       @id @default(cuid())
  teachingPlanId String
  subjectId      String
  subject        Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teachingPlan   TeachingPlan @relation(fields: [teachingPlanId], references: [id], onDelete: Cascade)

  @@unique([teachingPlanId, subjectId])
  @@map("teaching_plan_subjects")
}

model TeachingPlan {
  id          String                @id @default(cuid())
  studentId   String                @unique
  goals       String?
  methodology String?
  schedule    String?
  notes       String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  subjects    TeachingPlanSubject[]
  student     Student               @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@map("teaching_plans")
}

model StudentSchedule {
  id           String   @id @default(cuid())
  studentId    String
  dayOfWeek    DayOfWeek
  isLocked     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, dayOfWeek])
  @@map("student_schedules")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model Test {
  id            String       @id @default(cuid())
  schoolYearId  String
  staffId       String
  title         String
  description   String?
  scheduledDate DateTime
  maxScore      Decimal      @db.Decimal(5, 2)
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  subjectId     String
  results       TestResult[]
  schoolYear    SchoolYear   @relation(fields: [schoolYearId], references: [id])
  staff         Staff        @relation(fields: [staffId], references: [id])
  subject       Subject      @relation(fields: [subjectId], references: [id])

  @@map("tests")
}

model TestResult {
  id        String   @id @default(cuid())
  testId    String
  studentId String
  score     Decimal  @db.Decimal(5, 2)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([testId, studentId])
  @@map("test_results")
}

model Attendance {
  id           String           @id @default(cuid())
  studentId    String
  schoolYearId String
  date         DateTime         @db.Date
  status       AttendanceStatus @default(PRESENT)
  checkInTime  DateTime?
  checkOutTime DateTime?
  notes        String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  schoolYear   SchoolYear       @relation(fields: [schoolYearId], references: [id])
  student      Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, date])
  @@map("attendances")
}

model MembershipPlan {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String?
  daysPerWeek  Int
  monthlyPrice Decimal   @db.Decimal(10, 2)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  students     Student[]

  @@map("membership_plans")
}

model Message {
  id            String            @id @default(cuid())
  senderId      String?
  recipientId   String?
  senderType    MessageSenderType
  recipientType MessageSenderType
  subject       String
  content       String
  isRead        Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  toUser        User?             @relation("ReceivedMessages", fields: [recipientId], references: [id])
  fromUser      User?             @relation("SentMessages", fields: [senderId], references: [id])

  @@map("messages")
}

model Activity {
  id            String            @id @default(cuid())
  schoolYearId  String
  staffId       String
  title         String
  description   String?
  activityType  ActivityType
  scheduledDate DateTime
  isCompleted   Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  schoolYear    SchoolYear        @relation(fields: [schoolYearId], references: [id])
  staff         Staff             @relation(fields: [staffId], references: [id])
  students      StudentActivity[]

  @@map("activities")
}

model StudentActivity {
  id         String   @id @default(cuid())
  studentId  String
  activityId String
  status     String   @default("ASSIGNED")
  grade      Decimal? @db.Decimal(5, 2)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, activityId])
  @@map("student_activities")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  dataType    String   @default("string")
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

enum UserRole {
  ADMIN
  STAFF
  STUDENT
  PARENT
}

enum PaymentType {
  MONTHLY_FEE
  REGISTRATION_FEE
  EXAM_FEE
  MATERIAL_FEE
  OTHER
}

enum MessageSenderType {
  STAFF
  PARENT
  SYSTEM
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum ActivityType {
  ASSIGNMENT
  PROJECT
  EXAM
  EVENT
  MEETING
  DEADLINE
  OTHER
}

enum ExpenseType {
  SERVICE
  MATERIALS
  DAILY_EMPLOYEES
}

model Expense {
  id          String      @id @default(cuid())
  type        ExpenseType
  description String
  amount      Decimal     @db.Decimal(10, 2)
  date        DateTime    @db.Date
  category    String?     // Optional sub-category
  vendor      String?     // Who provided the service/materials
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String      // User ID who created the expense

  @@map("expenses")
}
