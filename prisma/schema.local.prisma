// Local development schema with SQLite
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student Student?
  parent  Parent?
  staff   Staff?

  @@map("users")
}

model Student {
  id          String   @id @default(cuid())
  userId      String   @unique
  studentId   String   @unique
  grade       String
  class       String?
  dateOfBirth DateTime
  address     String
  phone       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  parents    StudentParent[]
  attendance Attendance[]
  grades     Grade[]
  payments   Payment[]
  tests      Test[]

  @@map("students")
}

model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  students StudentParent[]

  @@map("parents")
}

model StudentParent {
  id         String @id @default(cuid())
  studentId  String
  parentId   String
  relationship String // father, mother, guardian, etc.

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@map("student_parents")
}

model Staff {
  id          String   @id @default(cuid())
  userId      String   @unique
  employeeId  String   @unique
  position    String
  department  String
  salary      Float
  hireDate    DateTime
  phone       String
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes Class[]
  grades  Grade[]

  @@map("staff")
}

// Academic Management
model Subject {
  id          String @id @default(cuid())
  name        String @unique
  code        String @unique
  description String?
  credits     Int    @default(1)

  // Relations
  classes Class[]
  grades  Grade[]
  tests   Test[]

  @@map("subjects")
}

model Class {
  id        String   @id @default(cuid())
  name      String
  subjectId String
  teacherId String
  grade     String
  schedule  String
  room      String
  capacity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subject    Subject      @relation(fields: [subjectId], references: [id])
  teacher    Staff        @relation(fields: [teacherId], references: [id])
  attendance Attendance[]

  @@map("classes")
}

model Attendance {
  id        String          @id @default(cuid())
  studentId String
  classId   String
  date      DateTime
  status    AttendanceStatus
  notes     String?
  createdAt DateTime        @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId, date])
  @@map("attendance")
}

model Grade {
  id        String    @id @default(cuid())
  studentId String
  subjectId String
  teacherId String
  value     Float
  maxValue  Float     @default(100)
  type      GradeType
  notes     String?
  date      DateTime
  createdAt DateTime  @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Staff   @relation(fields: [teacherId], references: [id])

  @@map("grades")
}

model Test {
  id          String    @id @default(cuid())
  studentId   String
  subjectId   String
  title       String
  description String?
  testDate    DateTime
  score       Float?
  maxScore    Float     @default(100)
  passed      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id])

  @@map("tests")
}

// Financial Management
model Payment {
  id          String        @id @default(cuid())
  studentId   String
  amount      Float
  type        PaymentType
  status      PaymentStatus @default(PENDING)
  dueDate     DateTime
  paidDate    DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Expense {
  id          String      @id @default(cuid())
  amount      Float
  category    String
  description String
  date        DateTime
  type        ExpenseType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("expenses")
}

// Enums
enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum GradeType {
  EXAM
  QUIZ
  HOMEWORK
  PROJECT
  PARTICIPATION
}

enum PaymentType {
  TUITION
  FEES
  MATERIALS
  TRANSPORT
  LUNCH
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum ExpenseType {
  SALARY
  UTILITIES
  SUPPLIES
  MAINTENANCE
  INSURANCE
  OTHER
}
